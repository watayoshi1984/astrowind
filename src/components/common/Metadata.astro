---
import merge from 'lodash.merge';
import { AstroSeo } from '@astrolib/seo';

import type { Props as AstroSeoProps } from '@astrolib/seo';

import { SITE, METADATA, I18N } from '~/config';
import type { MetaData } from '~/types';
import { getCanonical } from '~/utils/permalinks';

import { adaptOpenGraphImages } from '~/utils/images';

export interface Props extends MetaData {
  dontUseTitleTemplate?: boolean;
}

const {
  title,
  ignoreTitleTemplate = false,
  canonical = String(getCanonical(String(Astro.url.pathname))),
  robots = {},
  description,
  openGraph = {},
  twitter = {},
} = Astro.props;

const currentPath = new URL(Astro.url.pathname, Astro.site).pathname;
const isCompanyPage = currentPath.startsWith('/company/');
const isBlogPage = currentPath.startsWith('/blog/');

// パスに基づいて適切な説明文を選択
const getContextualDescription = () => {
  if (description) return description;
  if (isCompanyPage) return METADATA.description.company;
  if (isBlogPage) return METADATA.description.blog;
  return METADATA.description.default;
};

const seoProps: AstroSeoProps = merge(
  {
    title: '',
    titleTemplate: '%s',
    canonical: canonical,
    noindex: true,
    nofollow: true,
    description: undefined,
    openGraph: {
      url: canonical,
      site_name: SITE?.name,
      images: [],
      locale: I18N?.language || 'ja',
      type: 'website',
    },
    twitter: {
      cardType: openGraph?.images?.length ? 'summary_large_image' : 'summary',
    },
    facebook: METADATA.facebook,
  },
  {
    title: METADATA?.title?.default,
    titleTemplate: METADATA?.title?.template,
    noindex: typeof METADATA?.robots?.index !== 'undefined' ? !METADATA.robots.index : undefined,
    nofollow: typeof METADATA?.robots?.follow !== 'undefined' ? !METADATA.robots.follow : undefined,
    description: getContextualDescription(),
    openGraph: METADATA?.openGraph,
    twitter: METADATA?.twitter,
  },
  {
    title: title,
    titleTemplate: ignoreTitleTemplate ? '%s' : undefined,
    canonical: canonical,
    noindex: typeof robots?.index !== 'undefined' ? !robots.index : undefined,
    nofollow: typeof robots?.follow !== 'undefined' ? !robots.follow : undefined,
    description: description,
    openGraph: {
      url: canonical,
      ...openGraph,
      // ホームページの場合はwebsite、ブログ記事の場合はarticleを設定
      type: isBlogPage ? 'article' : 'website',
    },
    twitter: twitter,
  }
);
---

<AstroSeo {...{ ...seoProps, openGraph: await adaptOpenGraphImages(seoProps?.openGraph, Astro.site) }} />

<!-- 構造化データの追加 -->
{
  SITE.company && (
    <script type="application/ld+json" set:html={JSON.stringify({
      '@context': 'https://schema.org',
      '@type': 'Organization',
      'name': SITE.company.name,
      'address': {
        '@type': 'PostalAddress',
        'addressLocality': SITE.company.address
      },
      'telephone': SITE.company.phone,
      'email': SITE.company.email,
      'foundingDate': SITE.company.foundation,
      'taxID': SITE.company.registration,
      'url': SITE.site,
      'sameAs': [
        SITE.social?.twitter,
        SITE.social?.facebook,
        SITE.social?.linkedin
      ].filter(Boolean)
    })} />
  )
}

<!-- PWA対応のためのマニフェストファイル -->
<link rel="manifest" href="/manifest.json" />

<!-- モバイル対応のメタタグ -->
<meta name="format-detection" content="telephone=no" />
<meta name="theme-color" content="#ffffff" />
<meta name="mobile-web-app-capable" content="yes" />
<meta name="apple-mobile-web-app-capable" content="yes" />
<meta name="apple-mobile-web-app-status-bar-style" content="default" />

<!-- DNS Prefetch -->
<link rel="dns-prefetch" href="//fonts.googleapis.com" />
<link rel="dns-prefetch" href="//fonts.gstatic.com" />
<link rel="preconnect" href="//fonts.googleapis.com" crossorigin />
<link rel="preconnect" href="//fonts.gstatic.com" crossorigin />
